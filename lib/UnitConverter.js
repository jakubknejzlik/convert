// Generated by CoffeeScript 1.10.0
(function() {
  var UnitConverter, getUnit, systems;

  getUnit = require('get-unit');

  systems = {
    'time': require('./systems/time'),
    'byte': require('./systems/byte')
  };

  UnitConverter = (function() {
    function UnitConverter(value1, systemName) {
      var name, system, unit;
      this.value = value1;
      this.unitSymbol = getUnit(this.value);
      this.baseValue = Number(this.value.replace(this.unitSymbol, ''));
      if (systemName) {
        system = systems[systemName];
        unit = this._getUnitFromSystem(this.unitSymbol, system);
        if (unit) {
          this.unit = unit;
          this.system = system;
        }
      } else {
        for (name in systems) {
          system = systems[name];
          unit = this._getUnitFromSystem(this.unitSymbol, system);
          if (unit) {
            this.unit = unit;
            this.system = system;
            break;
          }
        }
      }
      if (!this.system) {
        throw new Error('unknown unit system for ' + this.value);
      }
    }

    UnitConverter.prototype._getUnitFromSystem = function(unit, system) {
      var ref, ref1, ref2;
      return ((ref = system.units) != null ? ref[unit] : void 0) || ((ref1 = system.units) != null ? ref1[(ref2 = system.aliases) != null ? ref2[unit] : void 0] : void 0);
    };

    UnitConverter.prototype.getUnit = function() {
      return this.unitSymbol;
    };

    UnitConverter.prototype.getBaseUnit = function() {};

    UnitConverter.prototype.to = function(unit) {
      var toUnit, value;
      toUnit = this._getUnitFromSystem(unit, this.system);
      if (!toUnit) {
        throw new Error('unknown unit ' + unit + ' for ' + this.system.name + ' system');
      }
      value = this.baseValue * this.unit.ratio;
      return value / toUnit.ratio;
    };

    UnitConverter.prototype.toBase = function() {
      return this.to(this.system.baseUnit);
    };

    return UnitConverter;

  })();

  module.exports = UnitConverter;

}).call(this);
